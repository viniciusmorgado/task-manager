// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManager.Infrastructure.Data;

#nullable disable

namespace TaskManager.Infrastructure.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20250622004044_RemoveTaskHistory")]
    partial class RemoveTaskHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Montar a vitrine com as novas peças da coleção de verão, destacando promoções de bermudas e camisetas.",
                            Status = 1,
                            Title = "Organizar vitrine de verão"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Verificar a quantidade de tênis esportivos no estoque e atualizar o sistema caso haja divergências.",
                            Status = 1,
                            Title = "Conferir estoque de tênis"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Auxiliar cliente na escolha de vestidos para festa e sugerir acessórios combinando.",
                            Status = 1,
                            Title = "Atender cliente na seção feminina"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Inserir no sistema as novas jaquetas recebidas do fornecedor, incluindo fotos e preços.",
                            Status = 1,
                            Title = "Cadastrar novos produtos"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Efetuar a troca de uma calça jeans conforme solicitação do cliente, seguindo o procedimento da loja.",
                            Status = 1,
                            Title = "Realizar troca de mercadoria"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Organizar e higienizar os provadores ao final do expediente.",
                            Status = 1,
                            Title = "Limpar provadores"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Gerar e enviar o relatório diário de vendas para o gerente até as 18h.",
                            Status = 1,
                            Title = "Enviar relatório de vendas"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Verificar a arara de camisetas básicas e repor os tamanhos que estiverem em falta.",
                            Status = 1,
                            Title = "Repor camisetas na arara"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Receber e conferir a entrega de sapatos do fornecedor, checando quantidades e modelos.",
                            Status = 1,
                            Title = "Acompanhar entrega de fornecedor"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Preparar um kit presente com camiseta, cinto e carteira para cliente que solicitou embalagem especial.",
                            Status = 1,
                            Title = "Montar kit presente"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Alterar os preços das peças em liquidação no sistema e nas etiquetas da loja.",
                            Status = 1,
                            Title = "Atualizar preços de liquidação"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Finalizar a compra de um cliente, oferecendo opções de parcelamento e embalagem para presente.",
                            Status = 1,
                            Title = "Atender cliente no caixa"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Selecionar e embalar os produtos vendidos pelo site para envio via transportadora.",
                            Status = 1,
                            Title = "Separar pedidos do e-commerce"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Apresentar a loja, explicar procedimentos de atendimento e demonstrar o sistema de vendas ao novo funcionário.",
                            Status = 1,
                            Title = "Treinar novo colaborador"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 6, 20, 22, 32, 35, 0, DateTimeKind.Utc),
                            CreatedById = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            Description = "Realizar contagem dos produtos em estoque e registrar eventuais diferenças para conferência.",
                            Status = 1,
                            Title = "Fazer inventário semanal"
                        });
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "944cc574-7936-4e3f-8b59-56c4af209d6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f2226b9-feb7-49bb-8779-ddec32a6be9e",
                            Email = "admin@taskmanager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@TASKMANAGER.COM",
                            NormalizedUserName = "ADMIN@TASKMANAGER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNp4hs5LoG14uSkMSi++QTc4IauP3GpOv/Xl4Uhnt6MerlT3evllIZvHsNnEFue3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KFH2DVXTLVQIXVPVAOWGGQU62PSGKRB4",
                            TwoFactorEnabled = false,
                            UserName = "admin@taskmanager.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.Task", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
